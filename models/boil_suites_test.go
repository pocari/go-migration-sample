// Code generated by SQLBoiler 4.1.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Foos", testFoos)
	t.Run("Hoges", testHoges)
}

func TestDelete(t *testing.T) {
	t.Run("Foos", testFoosDelete)
	t.Run("Hoges", testHogesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Foos", testFoosQueryDeleteAll)
	t.Run("Hoges", testHogesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Foos", testFoosSliceDeleteAll)
	t.Run("Hoges", testHogesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Foos", testFoosExists)
	t.Run("Hoges", testHogesExists)
}

func TestFind(t *testing.T) {
	t.Run("Foos", testFoosFind)
	t.Run("Hoges", testHogesFind)
}

func TestBind(t *testing.T) {
	t.Run("Foos", testFoosBind)
	t.Run("Hoges", testHogesBind)
}

func TestOne(t *testing.T) {
	t.Run("Foos", testFoosOne)
	t.Run("Hoges", testHogesOne)
}

func TestAll(t *testing.T) {
	t.Run("Foos", testFoosAll)
	t.Run("Hoges", testHogesAll)
}

func TestCount(t *testing.T) {
	t.Run("Foos", testFoosCount)
	t.Run("Hoges", testHogesCount)
}

func TestHooks(t *testing.T) {
	t.Run("Foos", testFoosHooks)
	t.Run("Hoges", testHogesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Foos", testFoosInsert)
	t.Run("Foos", testFoosInsertWhitelist)
	t.Run("Hoges", testHogesInsert)
	t.Run("Hoges", testHogesInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Foos", testFoosReload)
	t.Run("Hoges", testHogesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Foos", testFoosReloadAll)
	t.Run("Hoges", testHogesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Foos", testFoosSelect)
	t.Run("Hoges", testHogesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Foos", testFoosUpdate)
	t.Run("Hoges", testHogesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Foos", testFoosSliceUpdateAll)
	t.Run("Hoges", testHogesSliceUpdateAll)
}
